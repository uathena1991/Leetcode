"""
test case:
315
[[0,1],[0,2],[2,3],[1,4],[2,5],[0,6],[2,7],[7,8],[2,9],[7,10],[6,11],[5,12],[6,13],[8,14],[3,15],[5,16],[15,17],[13,18],[16,19],[4,20],[1,21],[0,22],[18,23],[13,24],[8,25],[10,26],[17,27],[17,28],[26,29],[27,30],[13,31],[13,32],[21,33],[14,34],[12,35],[21,36],[28,37],[28,38],[16,39],[35,40],[23,41],[40,42],[39,43],[20,44],[1,45],[36,46],[43,47],[36,48],[47,49],[49,50],[0,51],[24,52],[20,53],[46,54],[23,55],[35,56],[43,57],[38,58],[38,59],[57,60],[39,61],[37,62],[52,63],[11,64],[54,65],[30,66],[24,67],[52,68],[58,69],[5,70],[17,71],[63,72],[40,73],[26,74],[20,75],[30,76],[45,77],[52,78],[46,79],[67,80],[3,81],[33,82],[12,83],[1,84],[82,85],[28,86],[65,87],[62,88],[66,89],[84,90],[86,91],[31,92],[80,93],[79,94],[48,95],[64,96],[7,97],[90,98],[30,99],[12,100],[33,101],[82,102],[28,103],[82,104],[88,105],[0,106],[42,107],[48,108],[50,109],[57,110],[2,111],[97,112],[16,113],[52,114],[60,115],[6,116],[26,117],[61,118],[32,119],[50,120],[65,121],[3,122],[113,123],[46,124],[7,125],[119,126],[8

"""

class Solution:
    def findMinHeightTrees(self, n, edges):
        """
        :type n: int
        :type edges: List[List[int]]
        :rtype: List[int]
        """
        from collections import defaultdict
        if n < 1:
            return []
        if n == 1:
            return [0]
        unvisited = set([x for x in range(n)])
        neibours = defaultdict(set)
        degree = defaultdict(int)
        for ed in edges:
            neibours[ed[0]].add(ed[1])
            neibours[ed[1]].add(ed[0])
            degree[ed[0]] += 1
            degree[ed[1]] += 1
        # find leafs
        curr_level = [x for x in unvisited if degree[x] == 1]
        while len(unvisited) > 2:
            next_level = []
            for cc in curr_level:
                unvisited.remove(cc)
                for nn in neibours[cc]:
                    degree[nn] -= 1
                    if nn in unvisited and degree[nn] == 1:
                        next_level.append(nn)
            curr_level = next_level

        return curr_level




